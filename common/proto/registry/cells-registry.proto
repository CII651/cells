syntax = "proto3";

package registry;

option go_package = "github.com/pydio/cells/common/proto/registry";

service Registry {
  rpc Start(Item) returns (EmptyResponse) {};
  rpc Stop(Item) returns (EmptyResponse) {};
  rpc Get(GetRequest) returns (GetResponse) {};
  rpc Register(Item) returns (EmptyResponse) {};
  rpc Deregister(Item) returns (EmptyResponse) {};
  rpc List(ListRequest) returns (ListResponse) {};
  rpc Watch(WatchRequest) returns (stream Result) {};
}

enum ItemType {
  ALL = 0;
  SERVICE = 1;
  SERVER = 2;
  DAO = 3;
  GENERIC = 4;
  EDGE = 5;
}

enum ActionType {
  ANY = 0;
  FULL_DIFF = 1;
  FULL_LIST = 2;
  CREATE = 3;
  UPDATE = 4;
  DELETE = 5;
}

message Item {
  oneof item {
    Service service = 1;
    Server server = 2;
    Dao dao = 3;
    Generic generic = 4;
    Edge edge = 5;
  }
  repeated Item adjacents = 6;
}

message ItemMap {
  map<string, Item> items = 1;
}

// Service represents a go-micro service
message Service {
  string id = 1;
  string name = 2;
  string version = 3;
  map<string,string> metadata = 4;
  Options options = 6;
  repeated string tags = 7;
}

// Server represents the node the service is on
message Server {
  string id = 1;
  string name = 2;
  repeated string address = 3;
  map<string,string> metadata = 4;
  repeated string endpoints = 5;
}

message Dao {
  string id = 1;
  string name = 2;
  string driver = 3;
  string dsn = 4;
  map<string,string> metadata = 5;
}

message Edge {
  string id = 1;
  string name = 2;
  repeated string vertices = 3;
  map<string,string> metadata = 4;
}

message Generic {
  string id = 1;
  string name = 2;
  map<string,string> metadata = 3;
}

// Options are registry options
message Options {
  int64 ttl = 1;
  ItemType type = 2;
  ActionType action = 3;
  string name = 4;
  string metaName = 5;
  string metaValue = 6;
}

// Result is returns by the watcher
message Result {
  ActionType action = 1; // create, update, delete
  repeated Item items = 2;
  int64 timestamp = 3; // unix timestamp
}

message EmptyResponse {}

message StartRequest {
  Item item = 1;
}

message StopRequest {
  Item item = 1;
}

message GetRequest {
  string id = 1;
  Options options = 2;
}

message GetResponse {
  Item item = 1;
}

message ListRequest {
  Options options = 1;
  Options adjacentsOptions = 2;
}

message ListResponse {
  repeated Item items = 1;
}

message WatchRequest {
  string name = 1;
  Options options = 2;
}

// EventType defines the type of event
enum EventType {
  Create = 0;
  Delete = 1;
  Update = 2;
}

// Event is registry event
message Event {
  // Event Id
  string id = 1;
  // type of event
  EventType type = 2;
  // unix timestamp of event
  int64 timestamp = 3;
  // item entry
  Item item = 4;
}