CHART NAME: {{ .Chart.Name }}

To upgrade, retrieve the different password from the different dependencies enabled
{{- if .Values.mariadb.enabled }}
export MARIADB_ROOT_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "cells.mariadbName" . }} -o jsonpath="{.data.mariadb-root-password}" | base64 -d)
{{- end }}
{{- if .Values.minio.enabled }}
export MINIO_ROOT_USER=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "cells.minioName" . }} -o jsonpath="{.data.root-user}" | base64 -d)
export MINIO_ROOT_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "cells.minioName" . }} -o jsonpath="{.data.root-password}" | base64 -d)
{{- end }}
{{- if.Values.etcd.enabled }}
{{- if or .Values.etcd.auth.rbac.create .Values.etcd.auth.rbac.enabled }}
export ETCD_ROOT_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "cells.etcdName" . }} -o jsonpath="{.data.etcd-root-password}" | base64 -d)
{{- end }}
{{- end }}
{{- if and .Values.nats.enabled .Values.nats.auth.enabled }}
export NATS_USER=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "cells.natsName" . }} -o jsonpath='{.data.*}' | base64 -d | grep -m 1 user | awk '{print $2}' | tr -d '"')
export NATS_PASS=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "cells.natsName" . }} -o jsonpath='{.data.*}' | base64 -d | grep -m 1 password | awk '{print $2}' | tr -d '"')
{{- end }}
{{- if .Values.redis.enabled }}
export REDIS_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "cells.redisName" . }} -o jsonpath="{.data.redis-password}" | base64 -d)
{{- end }}
{{- if and .Values.mongodb.enabled .Values.mongodb.auth.enabled }}
export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "cells.mongodbName" . }} -o jsonpath="{.data.mongodb-root-password}" | base64 -d)
{{- end }}

And pass them to the upgrade command

helm upgrade --namespace {{ .Release.Namespace }} {{ .Release.Name }}
{{- if .Values.mariadb.enabled }} --set mariadb.auth.password=$MARIADB_ROOT_PASSWORD{{- end }}
{{- if .Values.minio.enabled }} --set minio.auth.rootUser=$MINIO_ROOT_USER{{- end }}
{{- if .Values.minio.enabled }} --set minio.auth.rootPassword=$MINIO_ROOT_PASSWORD{{- end }}
{{- if .Values.etcd.enabled }}{{- if or .Values.etcd.auth.rbac.create .Values.etcd.auth.rbac.enabled }} --set etcd.rbac.rootPassword=$ETCD_PASSWORD{{- end }}{{- end }}
{{- if and .Values.nats.enabled .Values.nats.auth.enabled }} --set nats.auth.user=$NATS_USER{{- end }}
{{- if and .Values.nats.enabled .Values.nats.auth.enabled }} --set nats.auth.password=$NATS_PASS{{- end }}
{{- if .Values.redis.enabled }} --set redis.auth.password=$REDIS_PASSWORD{{- end }}
{{- if .Values.mongodb.enabled }} --set mongodb.auth.rootPassword=$MONGODB_ROOT_PASSWORD{{- end }}

{{- if .Values.ingress.enabled }}

Your application URL is :
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $.Values.ingress.hostname }}{{ .Values.ingress.path }}

NOTE: It may take a few minutes for the pods to be ready and accessible by the load balancer

{{- else if contains "NodePort" .Values.service.type }}

Get the application URL by running these commands:

  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "cells.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT

{{- else if contains "LoadBalancer" .Values.service.type }}

Get the application URL by running these commands:

NOTE: It may take a few minutes for the LoadBalancer IP to be available.
     You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "cells.fullname" . }}'

  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "cells.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}

Get the application URL by running these commands:

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "cells.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
  
{{- end }}